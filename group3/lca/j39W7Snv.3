#include <bits/stdc++.h>
using namespace std;

const int MAX_N = 1e5 + 10;

int tree[4 * MAX_N];
int arr[MAX_N];
vector<int> g[MAX_N];

void upd(int curr, int l, int r, int ind, int val) {
    if(l == r && l == ind) {
        tree[curr] = val;
        return;
    } else if(ind > r || ind < l) {
        return;
    }
    int m = (l + r) / 2;
    upd(curr * 2, l, m, ind, val);
    upd(curr * 2 + 1, m + 1, r, ind, val);
    tree[curr] = tree[curr * 2] + tree[curr * 2 + 1];
}

int sum(int curr, int l, int r, int ql, int qr) {
    if(l > qr || r < ql) {
        return 0;
    } else if(ql <= l && r <= qr) {
        return tree[curr];
    }
    int m = (l + r) / 2;
    return sum(curr * 2, l, m, ql, qr) + sum(curr * 2 + 1, m + 1, r, ql, qr);
}

int in[MAX_N], out[MAX_N], tme = 0;

int n, q;

void dfs(int x, int p) {
    in[x] = tme;//tme = red.size() - 1;
    upd(1, 0, n - 1, tme, arr[x]);\
    //red.push_back(x);
    tme ++;//tme = red.size() - 1;

    for(auto it : g[x]) {
        if(it == p) {continue;}
        dfs(it, x);
    }
    out[x] = tme - 1;
}
:wq:

int main() {
    cin >> n;
    for(int i = 1; i <= n; i ++) {
        cin >> arr[i];
    }
    for(int i = 1; i < n; i ++) {
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    cin >> q;
    dfs(1, 0);    
    while(q --) {
        int t;
        cin >> t;
        if(t == 1) {
            int a;
            cin >> a;
            cout << sum(1, 0, n - 1, in[a], out[a]) << endl;
        } else {
            int a, b;
            cin >> a >> b;
            upd(1, 0, n - 1, in[a], b);
        }
    }
}
